{"mappings":"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","sources":["src/model.js","src/view.js","src/controller.js"],"sourcesContent":["export const model = {\n  state: {\n    turnLetter: \"x\",\n      playerName: \"\",\n      controls: false,\n      mode: \"START\",\n      winScenarios: [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ],\n      playerNames: [\"\", \"\"],\n  },\n}","import { controller } from \"./controller\";\n\nexport const dom = {\n    gameBoard: document.querySelector(\".game-board\"),\n    playerName: document.querySelector(\"#player-name\"),\n    result: document.querySelector(\".result\"),\n    gameTurn: document.querySelector(\".game-turn\"),\n    controls: document.querySelector(\".controls\"),\n    backdrop: document.querySelector(\".backdrop\"),\n    playBtn: document.querySelector(\"#play\"),\n    controlsClick: document.querySelector(\"#click\"),\n    lines: document.querySelectorAll(\".line\"),\n    boxes: document.querySelector(\".boxes\")\n}\n\nexport const controlPanel = {\n  init() {\n    // listeners\n    dom.controlsClick.addEventListener(\"click\", () => {\n      const {mode} = controller.getState();\n      if (mode === \"START\") return;\n      this.toggle();\n    });\n    \n    dom.playBtn.addEventListener(\"click\", (e) => {\n      const {playerName} = controller.getState();\n      const player1 = document.querySelector(\"#player1\").value;\n      const player2 = document.querySelector(\"#player2\").value;\n      if (player1 && player2) {\n        e.preventDefault();\n        controller.setState({\n          playerNames: [player1, player2],\n          playerName: player1,\n          mode: \"PLAYING\"\n        });\n        this.toggle();\n        dom.playerName.innerHTML = playerName;\n        this.reset();\n      }\n    });\n  },\n  toggle() {\n    const {controls} = controller.getState();\n    let translateValue = \"-200px\";\n    let backdropDisplay = \"none\";\n    if (controls) {\n      translateValue = \"200px\";\n      backdropDisplay = \"block\";\n    }\n    dom.controls.style.transform = `translate(-50%, ${translateValue})`;\n    dom.backdrop.style.display = backdropDisplay;\n    controller.setState({\n      controls: !controls\n    });\n  },\n  reset() {\n    const {playerName} = controller.getState();\n    // empty all the boxes\n    const boxes = Array.from(dom.boxes.children)\n    boxes.forEach((box) => {\n      box.innerHTML = \"\";\n    });\n    // update the player name\n    dom.playerName.innerHTML = playerName;\n    dom.gameTurn.style.display = \"block\";\n    dom.result.innerHTML = \"\";\n    dom.lines.forEach((line) => {\n      line.style.display = \"none\";\n    });\n  }\n\n}\n\nexport const gameBoard = {\n  init() {\n    dom.gameBoard.addEventListener(\"click\", (event) => {\n      const {mode, turnLetter} = controller.getState()\n      const clickedBox = event.target;\n      if (clickedBox.innerHTML || mode === \"END\") return;\n      clickedBox.innerHTML = turnLetter;\n      const [isWin, matchNum] = controller.checkCase();\n      if (isWin) {\n        const {playerName} = controller.getState();\n        dom.result.innerHTML = `${playerName} is The Winner `;\n        dom.gameTurn.style.display = \"none\";\n        controller.setState({\n          mode: \"END\"\n        })\n        this.markMatch(matchNum);\n      }\n      console.log(controller.isClosedCase())\n      if(controller.isClosedCase()) {\n        console.log(\"closed\")\n      }\n      controller.changeTurn();\n      const {playerName: updatedPlayerName} = controller.getState()\n      dom.playerName.innerHTML = updatedPlayerName;\n    });\n  },\n  markMatch (matchNum) {\n    const line = document.querySelector(`#line${matchNum}`);\n    line.style.display = \"block\";\n  }\n}","import { model } from \"./model\";\nimport { controlPanel, dom, gameBoard } from \"./view\";\n\nexport const controller = {\n  \n  init () {\n    gameBoard.init();\n    controlPanel.init();\n  },\n\n  changeTurn() {\n    let { turnLetter, playerName, playerNames } = this.getState();\n    this.setState({\n      turnLetter: turnLetter === \"x\" ? \"o\" : \"x\",\n      playerName: playerName === playerNames[0] ? playerNames[1] : playerNames[0]\n    })\n  },\n\n\n  checkCase() {\n    // check the win scenarios\n    let { winScenarios } = this.getState();\n    for (let i = 0; i < winScenarios.length; i++) {\n      const scenario = winScenarios[i];\n      if (this.isMatch(scenario)) {\n        return [true, i + 1];\n      }\n      \n    }\n    return [false, undefined];\n  },\n\n  isMatch(scenario) {\n    const boxes = Array.from(dom.boxes.children)\n    const boxesValues = [\n      boxes[scenario[0]].innerHTML,\n      boxes[scenario[1]].innerHTML,\n      boxes[scenario[2]].innerHTML,\n    ];\n    if (!boxesValues[0]) return false;\n    let matched = true;\n    boxesValues.reduce((prevValue, currentValue) => {\n      matched = matched && currentValue === prevValue;\n      return prevValue;\n    }, boxesValues[0]);\n    return matched;\n  },\n\n  isClosedCase() {\n    const boxes = Array.from(dom.boxes.children);\n    let closed = true;\n    boxes.forEach(box => {\n      closed = closed && !!(box.innerHTML);\n    })\n    return closed;\n  },\n\n  // getters and setters\n  getState() {\n    return model.state;\n  },\n\n  setState(modifiedFields) {\n    model.state = {\n      // simple clone to prevent mutating data\n      ...model.state,\n      ...modifiedFields,\n    };\n  },\n};\n\n\ncontroller.init()"],"names":["$d7fcaaa29d0ffaa7$export$39a8f6bed6e94390","state","turnLetter","playerName","controls","mode","winScenarios","playerNames","$467972dd7b1d4dab$export$df3a06d6289f983e","gameBoard","document","querySelector","result","gameTurn","backdrop","playBtn","controlsClick","lines","querySelectorAll","boxes","$467972dd7b1d4dab$export$81c7915bb6c3ca9b","init","addEventListener","$d63a8266effe4d07$export$de3b759ab07e4403","getState","this","toggle","e","player1","value","player2","preventDefault","setState","innerHTML","reset","translateValue","backdropDisplay","style","transform","display","Array","from","children","forEach","box","line","$467972dd7b1d4dab$export$7c513ec27fcf70de","event","clickedBox","target","isWin","matchNum","checkCase","markMatch","console","log","isClosedCase","changeTurn","updatedPlayerName","i","length","scenario","isMatch","undefined","boxesValues","matched","reduce","prevValue","currentValue","closed","modifiedFields"],"version":3,"file":"index.838d5a0c.js.map"}